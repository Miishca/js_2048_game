{"version":3,"sources":["scripts/main.js"],"names":["tbody","document","querySelector","gameScore","button","messageStart","messageWin","messageLose","messageContainer","gameFields","score","isStart","isWin","gameOver","row","length","column","classList","remove","gameIsWin","moveTilesRight","moved","newRow","filter","tile","i","unshift","JSON","stringify","generateRandomNumber","render","moveTilesLeft","push","moveTilesUp","newCol","moveTilesDown","emptyCells","Math","floor","random","number","handleKeyPress","ev","key","addEventListener","innerHTML","createElement","add","j","cellValue","cell","textContent","appendChild","toggle","contains","removeChild"],"mappings":"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","file":"main.13f66066.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\nconst tbody = document.querySelector(\"tbody\");\nconst gameScore = document.querySelector(\".game-score\");\nconst button = document.querySelector(\"button\");\nconst messageStart = document.querySelector(\".message-start\");\nconst messageWin = document.querySelector(\".message-win\");\nconst messageLose = document.querySelector(\".message-lose\");\nconst messageContainer = document.querySelector(\".message-container\");\n\nlet gameFields = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score = 0;\n\nlet isStart = false;\n\nlet isWin = false;\n\ndocument.addEventListener(\"keydown\", handleKeyPress);\n\nfunction gameOver() {\n  for (let row = 0; row < gameFields.length; row++) {\n    for (let column = 0; column < gameFields[row].length; column++) {\n      if (gameFields[row][column] === 0) {\n        return false;\n      }\n\n      if (\n        column < gameFields[row].length - 1 &&\n        gameFields[row][column] === gameFields[row][column + 1]\n      ) {\n        return false;\n      }\n\n      if (\n        row < gameFields.length - 1 &&\n        gameFields[row][column] === gameFields[row + 1][column]\n      ) {\n        return false;\n      }\n    }\n  }\n\n  messageLose.classList.remove(\"hidden\");\n\n  return true;\n}\n\nfunction gameIsWin() {\n  for (let row = 0; row < gameFields.length; row++) {\n    for (let column = 0; column < gameFields[row].length; column++) {\n      if (gameFields[row][column] === 2048) {\n        isWin = true;\n        messageWin.classList.remove(\"hidden\");\n\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moveTilesRight() {\n  let moved = false;\n\n  for (let row = 0; row < gameFields.length; row++) {\n    let newRow = gameFields[row].filter((tile) => tile !== 0);\n\n    for (let i = newRow.length - 1; i > 0; i--) {\n      if (newRow[i] === newRow[i - 1]) {\n        newRow[i] *= 2;\n        newRow[i - 1] = 0;\n        score += newRow[i];\n        moved = true;\n      }\n    }\n    newRow = newRow.filter((tile) => tile !== 0);\n\n    while (newRow.length < 4) {\n      newRow.unshift(0);\n    }\n\n    if (JSON.stringify(newRow) !== JSON.stringify(gameFields[row])) {\n      moved = true;\n    }\n    gameFields[row] = newRow;\n  }\n\n  if (moved) {\n    generateRandomNumber();\n    render();\n  }\n}\n\nfunction moveTilesLeft() {\n  let moved = false;\n\n  for (let row = 0; row < gameFields.length; row++) {\n    let newRow = gameFields[row].filter((tile) => tile !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n        moved = true;\n      }\n    }\n    newRow = newRow.filter((tile) => tile !== 0);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    if (JSON.stringify(newRow) !== JSON.stringify(gameFields[row])) {\n      moved = true;\n    }\n    gameFields[row] = newRow;\n  }\n\n  if (moved) {\n    generateRandomNumber();\n    render();\n  }\n}\n\nfunction moveTilesUp() {\n  let moved = false;\n\n  for (let column = 0; column < 4; column++) {\n    let newCol = [];\n\n    for (let row = 0; row < 4; row++) {\n      if (gameFields[row][column] !== 0) {\n        newCol.push(gameFields[row][column]);\n      }\n    }\n\n    for (let i = 0; i < newCol.length - 1; i++) {\n      if (newCol[i] === newCol[i + 1]) {\n        newCol[i] *= 2;\n        newCol[i + 1] = 0;\n        score += newCol[i];\n        moved = true;\n      }\n    }\n    newCol = newCol.filter((tile) => tile !== 0);\n\n    while (newCol.length < 4) {\n      newCol.push(0);\n    }\n\n    for (let row = 0; row < 4; row++) {\n      if (gameFields[row][column] !== newCol[row]) {\n        moved = true;\n      }\n      gameFields[row][column] = newCol[row];\n    }\n  }\n\n  if (moved) {\n    generateRandomNumber();\n    render();\n  }\n}\n\nfunction moveTilesDown() {\n  let moved = false;\n\n  for (let column = 0; column < 4; column++) {\n    let newCol = [];\n\n    for (let row = 0; row < 4; row++) {\n      if (gameFields[row][column] !== 0) {\n        newCol.push(gameFields[row][column]);\n      }\n    }\n\n    for (let i = newCol.length - 1; i > 0; i--) {\n      if (newCol[i] === newCol[i - 1]) {\n        newCol[i] *= 2;\n        newCol[i - 1] = 0;\n        score += newCol[i];\n        moved = true;\n      }\n    }\n\n    newCol = newCol.filter((tile) => tile !== 0);\n\n    while (newCol.length < 4) {\n      newCol.unshift(0);\n    }\n\n    for (let row = 0; row < 4; row++) {\n      if (gameFields[row][column] !== newCol[row]) {\n        moved = true;\n      }\n      gameFields[row][column] = newCol[row];\n    }\n  }\n\n  if (moved) {\n    generateRandomNumber();\n    render();\n  }\n}\n\nfunction generateRandomNumber() {\n  const emptyCells = [];\n\n  for (let row = 0; row < 4; row++) {\n    for (let column = 0; column < 4; column++) {\n      if (gameFields[row][column] === 0) {\n        emptyCells.push({\n          row,\n          column,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const { row, column } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const number = Math.random() < 0.1 ? 4 : 2;\n\n    gameFields[row][column] = number;\n  }\n}\n\nfunction handleKeyPress(ev) {\n  if (isStart) {\n    let moved = false;\n\n    switch (ev.key) {\n      case \"ArrowUp\":\n        moveTilesUp();\n        moved = true;\n        break;\n      case \"ArrowDown\":\n        moveTilesDown();\n        moved = true;\n        break;\n      case \"ArrowLeft\":\n        moveTilesLeft();\n        moved = true;\n        break;\n      case \"ArrowRight\":\n        moveTilesRight();\n        moved = true;\n        break;\n    }\n\n    if (moved) {\n      render();\n    }\n  }\n}\n\nconst render = () => {\n  gameScore.innerHTML = `\n    <span class=\"game-score\">${score}</span>\n  `;\n\n  tbody.innerHTML = \"\";\n\n  for (let i = 0; i < gameFields.length; i++) {\n    const row = document.createElement(\"tr\");\n\n    row.classList.add(\"field-row\");\n\n    for (let j = 0; j < gameFields[i].length; j++) {\n      const cellValue = gameFields[i][j];\n      const cell = document.createElement(\"td\");\n\n      cell.textContent = cellValue === 0 ? \"\" : cellValue;\n      cell.classList.add(\"field-cell\");\n\n      if (cellValue === 0) {\n        cell.classList.add(\"field-cell\");\n      } else {\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n\n      row.appendChild(cell);\n    }\n\n    tbody.appendChild(row);\n  }\n\n  if (gameOver()) {\n    return;\n  }\n  gameIsWin();\n  messageWin.classList.toggle(\"hidden\", !isWin);\n  messageLose.classList.add(\"hidden\");\n  messageWin.classList.add(\"hidden\");\n\n  if (!isStart) {\n    messageContainer.appendChild(messageStart);\n  } else if (messageContainer.contains(messageStart)) {\n    messageContainer.removeChild(messageStart);\n  }\n};\n\nbutton.addEventListener(\"click\", () => {\n  isStart = true;\n\n  gameFields = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  button.classList.add(\"restart\");\n  button.textContent = \"Restart\";\n\n  if (messageContainer.contains(messageStart)) {\n    messageContainer.removeChild(messageStart);\n  }\n\n  messageLose.classList.add(\"hidden\");\n  messageWin.classList.add(\"hidden\");\n\n  generateRandomNumber();\n  generateRandomNumber();\n  render();\n});\n"]}